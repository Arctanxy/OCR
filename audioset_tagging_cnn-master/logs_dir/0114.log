Sat, 31 Jul 2021 23:08:31 main.py[line:119] INFO Namespace(augmentation='mixup', balanced='balanced', batch_size=32, cuda=True, data_type='full_train', early_stop=1000000, filename='C:\\scripts\\audioset_tagging_cnn-master\\pytorch\\main', fmax=14000, fmin=50, hop_size=320, learning_rate=0.001, loss_type='clip_bce', mel_bins=64, mode='train', model_type='Cnn14', resume_iteration=0, sample_rate=16000, window_size=1024, workspace='./')
Sat, 31 Jul 2021 23:08:31 main.py[line:122] INFO Using GPU.
Sat, 31 Jul 2021 23:08:32 main.py[line:136] INFO Parameters num: 79878692
Sat, 31 Jul 2021 23:08:32 interpreter.py[line:379] DEBUG label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    sample_ratio = arg(2, name=sample_ratio) ['sample_ratio']
    interp_win = arg(3, name=interp_win)     ['interp_win']
    interp_delta = arg(4, name=interp_delta) ['interp_delta']
    num_table = arg(5, name=num_table)       ['num_table']
    $0.1 = global(min: <built-in function min>) ['$0.1']
    $const0.2 = const(float, 1.0)            ['$const0.2']
    scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None) ['$0.1', '$const0.2', 'sample_ratio', 'scale']
    $const0.5 = const(float, 1.0)            ['$const0.5']
    time_increment = $const0.5 / sample_ratio ['$const0.5', 'sample_ratio', 'time_increment']
    $0.8 = global(int: <class 'int'>)        ['$0.8']
    $0.11 = scale * num_table                ['$0.11', 'num_table', 'scale']
    index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None) ['$0.11', '$0.8', 'index_step']
    time_register = const(float, 0.0)        ['time_register']
    n = const(int, 0)                        ['n']
    frac = const(float, 0.0)                 ['frac']
    index_frac = const(float, 0.0)           ['index_frac']
    offset = const(int, 0)                   ['offset']
    eta = const(float, 0.0)                  ['eta']
    weight = const(float, 0.0)               ['weight']
    $0.21 = getattr(value=interp_win, attr=shape) ['$0.21', 'interp_win']
    $const0.22 = const(int, 0)               ['$const0.22']
    nwin = getitem(value=$0.21, index=$const0.22, fn=<built-in function getitem>) ['$0.21', '$const0.22', 'nwin']
    $0.25 = getattr(value=x, attr=shape)     ['$0.25', 'x']
    $const0.26 = const(int, 0)               ['$const0.26']
    n_orig = getitem(value=$0.25, index=$const0.26, fn=<built-in function getitem>) ['$0.25', '$const0.26', 'n_orig']
    $0.29 = getattr(value=y, attr=shape)     ['$0.29', 'y']
    $const0.30 = const(int, 0)               ['$const0.30']
    n_out = getitem(value=$0.29, index=$const0.30, fn=<built-in function getitem>) ['$0.29', '$const0.30', 'n_out']
    $0.33 = getattr(value=y, attr=shape)     ['$0.33', 'y']
    $const0.34 = const(int, 1)               ['$const0.34']
    n_channels = getitem(value=$0.33, index=$const0.34, fn=<built-in function getitem>) ['$0.33', '$const0.34', 'n_channels']
    jump 100                                 []
label 100:
    jump 104                                 []
label 104:
    $104.1 = global(range: <class 'range'>)  ['$104.1']
    $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None) ['$104.1', '$104.3', 'n_out']
    $104.4 = getiter(value=$104.3)           ['$104.3', '$104.4']
    $phi112.1 = $104.4                       ['$104.4', '$phi112.1']
    jump 112                                 []
label 112:
    $112.2 = iternext(value=$phi112.1)       ['$112.2', '$phi112.1']
    $112.3 = pair_first(value=$112.2)        ['$112.2', '$112.3']
    $112.4 = pair_second(value=$112.2)       ['$112.2', '$112.4']
    $phi116.1 = $112.3                       ['$112.3', '$phi116.1']
    $phi476.1 = $112.3                       ['$112.3', '$phi476.1']
    $phi476.2 = $phi112.1                    ['$phi112.1', '$phi476.2']
    branch $112.4, 116, 476                  ['$112.4']
label 116:
    t = $phi116.1                            ['$phi116.1', 't']
    $116.2 = global(int: <class 'int'>)      ['$116.2']
    n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None) ['$116.2', 'n', 'time_register']
    $116.8 = time_register - n               ['$116.8', 'n', 'time_register']
    frac = scale * $116.8                    ['$116.8', 'frac', 'scale']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $116.13 = global(int: <class 'int'>)     ['$116.13']
    offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None) ['$116.13', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $116.19 = global(min: <built-in function min>) ['$116.19']
    $const116.21 = const(int, 1)             ['$const116.21']
    $116.22 = n + $const116.21               ['$116.22', '$const116.21', 'n']
    $116.25 = nwin - offset                  ['$116.25', 'nwin', 'offset']
    $116.27 = $116.25 // index_step          ['$116.25', '$116.27', 'index_step']
    i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None) ['$116.19', '$116.22', '$116.27', 'i_max']
    jump 184                                 []
label 184:
    jump 186                                 []
label 186:
    $186.1 = global(range: <class 'range'>)  ['$186.1']
    $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None) ['$186.1', '$186.3', 'i_max']
    $186.4 = getiter(value=$186.3)           ['$186.3', '$186.4']
    $phi194.1 = $186.4                       ['$186.4', '$phi194.1']
    jump 194                                 []
label 194:
    $194.2 = iternext(value=$phi194.1)       ['$194.2', '$phi194.1']
    $194.3 = pair_first(value=$194.2)        ['$194.2', '$194.3']
    $194.4 = pair_second(value=$194.2)       ['$194.2', '$194.4']
    $phi196.1 = $194.3                       ['$194.3', '$phi196.1']
    $phi290.1 = $194.3                       ['$194.3', '$phi290.1']
    $phi290.2 = $phi194.1                    ['$phi194.1', '$phi290.2']
    branch $194.4, 196, 290                  ['$194.4']
label 196:
    i = $phi196.1                            ['$phi196.1', 'i']
    $196.6 = i * index_step                  ['$196.6', 'i', 'index_step']
    $196.7 = offset + $196.6                 ['$196.6', '$196.7', 'offset']
    $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>) ['$196.7', '$196.8', 'interp_win']
    $196.14 = i * index_step                 ['$196.14', 'i', 'index_step']
    $196.15 = offset + $196.14               ['$196.14', '$196.15', 'offset']
    $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>) ['$196.15', '$196.16', 'interp_delta']
    $196.17 = eta * $196.16                  ['$196.16', '$196.17', 'eta']
    weight = $196.8 + $196.17                ['$196.17', '$196.8', 'weight']
    jump 234                                 []
label 234:
    jump 236                                 []
label 236:
    $236.1 = global(range: <class 'range'>)  ['$236.1']
    $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None) ['$236.1', '$236.3', 'n_channels']
    $236.4 = getiter(value=$236.3)           ['$236.3', '$236.4']
    $phi244.1 = $236.4                       ['$236.4', '$phi244.1']
    jump 244                                 []
label 244:
    $244.2 = iternext(value=$phi244.1)       ['$244.2', '$phi244.1']
    $244.3 = pair_first(value=$244.2)        ['$244.2', '$244.3']
    $244.4 = pair_second(value=$244.2)       ['$244.2', '$244.4']
    $phi246.1 = $244.3                       ['$244.3', '$phi246.1']
    $phi286.1 = $244.3                       ['$244.3', '$phi286.1']
    $phi286.2 = $phi244.1                    ['$phi244.1', '$phi286.2']
    branch $244.4, 246, 286                  ['$244.4']
label 246:
    j = $phi246.1                            ['$phi246.1', 'j']
    $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$246.5', 'j', 't']
    $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>) ['$246.5', '$246.8', 'y']
    $246.13 = n - i                          ['$246.13', 'i', 'n']
    $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)]) ['$246.13', '$246.15', 'j']
    $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>) ['$246.15', '$246.16', 'x']
    $246.17 = weight * $246.16               ['$246.16', '$246.17', 'weight']
    $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined) ['$246.17', '$246.18', '$246.8']
    y[$246.5] = $246.18                      ['$246.18', '$246.5', 'y']
    jump 244                                 []
label 286:
    jump 288                                 []
label 288:
    jump 194                                 []
label 290:
    jump 292                                 []
label 292:
    $292.3 = scale - frac                    ['$292.3', 'frac', 'scale']
    frac = $292.3                            ['$292.3', 'frac']
    index_frac = frac * num_table            ['frac', 'index_frac', 'num_table']
    $292.7 = global(int: <class 'int'>)      ['$292.7']
    offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None) ['$292.7', 'index_frac', 'offset']
    eta = index_frac - offset                ['eta', 'index_frac', 'offset']
    $292.13 = global(min: <built-in function min>) ['$292.13']
    $292.16 = n_orig - n                     ['$292.16', 'n', 'n_orig']
    $const292.17 = const(int, 1)             ['$const292.17']
    $292.18 = $292.16 - $const292.17         ['$292.16', '$292.18', '$const292.17']
    $292.21 = nwin - offset                  ['$292.21', 'nwin', 'offset']
    $292.23 = $292.21 // index_step          ['$292.21', '$292.23', 'index_step']
    k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None) ['$292.13', '$292.18', '$292.23', 'k_max']
    jump 350                                 []
label 350:
    jump 352                                 []
label 352:
    $352.1 = global(range: <class 'range'>)  ['$352.1']
    $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None) ['$352.1', '$352.3', 'k_max']
    $352.4 = getiter(value=$352.3)           ['$352.3', '$352.4']
    $phi360.1 = $352.4                       ['$352.4', '$phi360.1']
    jump 360                                 []
label 360:
    $360.2 = iternext(value=$phi360.1)       ['$360.2', '$phi360.1']
    $360.3 = pair_first(value=$360.2)        ['$360.2', '$360.3']
    $360.4 = pair_second(value=$360.2)       ['$360.2', '$360.4']
    $phi362.1 = $360.3                       ['$360.3', '$phi362.1']
    $phi464.1 = $360.3                       ['$360.3', '$phi464.1']
    $phi464.2 = $phi360.1                    ['$phi360.1', '$phi464.2']
    branch $360.4, 362, 464                  ['$360.4']
label 362:
    k = $phi362.1                            ['$phi362.1', 'k']
    $362.6 = k * index_step                  ['$362.6', 'index_step', 'k']
    $362.7 = offset + $362.6                 ['$362.6', '$362.7', 'offset']
    $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>) ['$362.7', '$362.8', 'interp_win']
    $362.14 = k * index_step                 ['$362.14', 'index_step', 'k']
    $362.15 = offset + $362.14               ['$362.14', '$362.15', 'offset']
    $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>) ['$362.15', '$362.16', 'interp_delta']
    $362.17 = eta * $362.16                  ['$362.16', '$362.17', 'eta']
    weight = $362.8 + $362.17                ['$362.17', '$362.8', 'weight']
    jump 400                                 []
label 400:
    jump 402                                 []
label 402:
    $402.1 = global(range: <class 'range'>)  ['$402.1']
    $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None) ['$402.1', '$402.3', 'n_channels']
    $402.4 = getiter(value=$402.3)           ['$402.3', '$402.4']
    $phi410.1 = $402.4                       ['$402.4', '$phi410.1']
    jump 410                                 []
label 410:
    $410.2 = iternext(value=$phi410.1)       ['$410.2', '$phi410.1']
    $410.3 = pair_first(value=$410.2)        ['$410.2', '$410.3']
    $410.4 = pair_second(value=$410.2)       ['$410.2', '$410.4']
    $phi412.1 = $410.3                       ['$410.3', '$phi412.1']
    $phi458.1 = $410.3                       ['$410.3', '$phi458.1']
    $phi458.2 = $phi410.1                    ['$phi410.1', '$phi458.2']
    branch $410.4, 412, 458                  ['$410.4']
label 412:
    j = $phi412.1                            ['$phi412.1', 'j']
    $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)]) ['$412.5', 'j', 't']
    $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>) ['$412.5', '$412.8', 'y']
    $412.13 = n + k                          ['$412.13', 'k', 'n']
    $const412.14 = const(int, 1)             ['$const412.14']
    $412.15 = $412.13 + $const412.14         ['$412.13', '$412.15', '$const412.14']
    $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)]) ['$412.15', '$412.17', 'j']
    $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>) ['$412.17', '$412.18', 'x']
    $412.19 = weight * $412.18               ['$412.18', '$412.19', 'weight']
    $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined) ['$412.19', '$412.20', '$412.8']
    y[$412.5] = $412.20                      ['$412.20', '$412.5', 'y']
    jump 410                                 []
label 458:
    jump 460                                 []
label 460:
    jump 360                                 []
label 464:
    jump 466                                 []
label 466:
    $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined) ['$466.3', 'time_increment', 'time_register']
    time_register = $466.3                   ['$466.3', 'time_register']
    jump 112                                 []
label 476:
    jump 478                                 []
label 478:
    $const478.1 = const(NoneType, None)      ['$const478.1']
    $478.2 = cast(value=$const478.1)         ['$478.2', '$const478.1']
    return $478.2                            ['$478.2']

Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:149] DEBUG ==== SSA block analysis pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._GatherDefsHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:141] DEBUG defs defaultdict(<class 'list'>,
            {'$0.1': [<numba.core.ir.Assign object at 0x0000026844E3B6D8>],
             '$0.11': [<numba.core.ir.Assign object at 0x0000026844E44048>],
             '$0.21': [<numba.core.ir.Assign object at 0x0000026844E44E10>],
             '$0.25': [<numba.core.ir.Assign object at 0x0000026844E49240>],
             '$0.29': [<numba.core.ir.Assign object at 0x0000026844E49630>],
             '$0.33': [<numba.core.ir.Assign object at 0x0000026844E49A20>],
             '$0.8': [<numba.core.ir.Assign object at 0x0000026844E3BDD8>],
             '$104.1': [<numba.core.ir.Assign object at 0x0000026844E3BB70>],
             '$104.3': [<numba.core.ir.Assign object at 0x0000026844E49160>],
             '$104.4': [<numba.core.ir.Assign object at 0x0000026844E49940>],
             '$112.2': [<numba.core.ir.Assign object at 0x0000026844E49E48>],
             '$112.3': [<numba.core.ir.Assign object at 0x0000026844E49EF0>],
             '$112.4': [<numba.core.ir.Assign object at 0x0000026844E49F98>],
             '$116.13': [<numba.core.ir.Assign object at 0x0000026844E52CF8>],
             '$116.19': [<numba.core.ir.Assign object at 0x0000026844E562B0>],
             '$116.2': [<numba.core.ir.Assign object at 0x0000026844E52358>],
             '$116.22': [<numba.core.ir.Assign object at 0x0000026844E56518>],
             '$116.25': [<numba.core.ir.Assign object at 0x0000026844E56748>],
             '$116.27': [<numba.core.ir.Assign object at 0x0000026844E568D0>],
             '$116.8': [<numba.core.ir.Assign object at 0x0000026844E52828>],
             '$186.1': [<numba.core.ir.Assign object at 0x0000026844E52BE0>],
             '$186.3': [<numba.core.ir.Assign object at 0x0000026844E56080>],
             '$186.4': [<numba.core.ir.Assign object at 0x0000026844E565C0>],
             '$194.2': [<numba.core.ir.Assign object at 0x0000026844E56BA8>],
             '$194.3': [<numba.core.ir.Assign object at 0x0000026844E56C50>],
             '$194.4': [<numba.core.ir.Assign object at 0x0000026844E56CF8>],
             '$196.14': [<numba.core.ir.Assign object at 0x0000026844E5A940>],
             '$196.15': [<numba.core.ir.Assign object at 0x0000026844E5AA20>],
             '$196.16': [<numba.core.ir.Assign object at 0x0000026844E5AB00>],
             '$196.17': [<numba.core.ir.Assign object at 0x0000026844E5ABE0>],
             '$196.6': [<numba.core.ir.Assign object at 0x0000026844E5A358>],
             '$196.7': [<numba.core.ir.Assign object at 0x0000026844E5A438>],
             '$196.8': [<numba.core.ir.Assign object at 0x0000026844E5A518>],
             '$236.1': [<numba.core.ir.Assign object at 0x0000026844E5A860>],
             '$236.3': [<numba.core.ir.Assign object at 0x0000026844E5AEB8>],
             '$236.4': [<numba.core.ir.Assign object at 0x0000026844E5AF98>],
             '$244.2': [<numba.core.ir.Assign object at 0x0000026844E5E198>],
             '$244.3': [<numba.core.ir.Assign object at 0x0000026844E5E240>],
             '$244.4': [<numba.core.ir.Assign object at 0x0000026844E5E2E8>],
             '$246.13': [<numba.core.ir.Assign object at 0x0000026844E5EDD8>],
             '$246.15': [<numba.core.ir.Assign object at 0x0000026844E5EF60>],
             '$246.16': [<numba.core.ir.Assign object at 0x0000026844E63080>],
             '$246.17': [<numba.core.ir.Assign object at 0x0000026844E63160>],
             '$246.18': [<numba.core.ir.Assign object at 0x0000026844E63240>],
             '$246.5': [<numba.core.ir.Assign object at 0x0000026844E5E860>],
             '$246.8': [<numba.core.ir.Assign object at 0x0000026844E5EA58>],
             '$292.13': [<numba.core.ir.Assign object at 0x0000026844E63EB8>],
             '$292.16': [<numba.core.ir.Assign object at 0x0000026844E67128>],
             '$292.18': [<numba.core.ir.Assign object at 0x0000026844E672E8>],
             '$292.21': [<numba.core.ir.Assign object at 0x0000026844E67518>],
             '$292.23': [<numba.core.ir.Assign object at 0x0000026844E676A0>],
             '$292.3': [<numba.core.ir.Assign object at 0x0000026844E63550>],
             '$292.7': [<numba.core.ir.Assign object at 0x0000026844E63940>],
             '$352.1': [<numba.core.ir.Assign object at 0x0000026844E63DA0>],
             '$352.3': [<numba.core.ir.Assign object at 0x0000026844E67438>],
             '$352.4': [<numba.core.ir.Assign object at 0x0000026844E678D0>],
             '$360.2': [<numba.core.ir.Assign object at 0x0000026844E67A90>],
             '$360.3': [<numba.core.ir.Assign object at 0x0000026844E67B38>],
             '$360.4': [<numba.core.ir.Assign object at 0x0000026844E67BE0>],
             '$362.14': [<numba.core.ir.Assign object at 0x0000026844E6D828>],
             '$362.15': [<numba.core.ir.Assign object at 0x0000026844E6D908>],
             '$362.16': [<numba.core.ir.Assign object at 0x0000026844E6D9E8>],
             '$362.17': [<numba.core.ir.Assign object at 0x0000026844E6DAC8>],
             '$362.6': [<numba.core.ir.Assign object at 0x0000026844E6D240>],
             '$362.7': [<numba.core.ir.Assign object at 0x0000026844E6D320>],
             '$362.8': [<numba.core.ir.Assign object at 0x0000026844E6D400>],
             '$402.1': [<numba.core.ir.Assign object at 0x0000026844E6D748>],
             '$402.3': [<numba.core.ir.Assign object at 0x0000026844E6DDA0>],
             '$402.4': [<numba.core.ir.Assign object at 0x0000026844E6DE80>],
             '$410.2': [<numba.core.ir.Assign object at 0x0000026844E70080>],
             '$410.3': [<numba.core.ir.Assign object at 0x0000026844E70128>],
             '$410.4': [<numba.core.ir.Assign object at 0x0000026844E701D0>],
             '$412.13': [<numba.core.ir.Assign object at 0x0000026844E70C88>],
             '$412.15': [<numba.core.ir.Assign object at 0x0000026844E70E48>],
             '$412.17': [<numba.core.ir.Assign object at 0x0000026844E70FD0>],
             '$412.18': [<numba.core.ir.Assign object at 0x0000026844E760F0>],
             '$412.19': [<numba.core.ir.Assign object at 0x0000026844E761D0>],
             '$412.20': [<numba.core.ir.Assign object at 0x0000026844E762B0>],
             '$412.5': [<numba.core.ir.Assign object at 0x0000026844E70710>],
             '$412.8': [<numba.core.ir.Assign object at 0x0000026844E70908>],
             '$466.3': [<numba.core.ir.Assign object at 0x0000026844E765C0>],
             '$478.2': [<numba.core.ir.Assign object at 0x0000026844E768D0>],
             '$const0.2': [<numba.core.ir.Assign object at 0x0000026844E3B7B8>],
             '$const0.22': [<numba.core.ir.Assign object at 0x0000026844E44EF0>],
             '$const0.26': [<numba.core.ir.Assign object at 0x0000026844E49320>],
             '$const0.30': [<numba.core.ir.Assign object at 0x0000026844E49710>],
             '$const0.34': [<numba.core.ir.Assign object at 0x0000026844E49B00>],
             '$const0.5': [<numba.core.ir.Assign object at 0x0000026844E3BAC8>],
             '$const116.21': [<numba.core.ir.Assign object at 0x0000026844E56438>],
             '$const292.17': [<numba.core.ir.Assign object at 0x0000026844E67208>],
             '$const412.14': [<numba.core.ir.Assign object at 0x0000026844E70D68>],
             '$const478.1': [<numba.core.ir.Assign object at 0x0000026844E767F0>],
             '$phi112.1': [<numba.core.ir.Assign object at 0x0000026844E44668>],
             '$phi116.1': [<numba.core.ir.Assign object at 0x0000026844E52048>],
             '$phi194.1': [<numba.core.ir.Assign object at 0x0000026844E525F8>],
             '$phi196.1': [<numba.core.ir.Assign object at 0x0000026844E56D68>],
             '$phi244.1': [<numba.core.ir.Assign object at 0x0000026844E5A080>],
             '$phi246.1': [<numba.core.ir.Assign object at 0x0000026844E5E358>],
             '$phi286.1': [<numba.core.ir.Assign object at 0x0000026844E5E3C8>],
             '$phi286.2': [<numba.core.ir.Assign object at 0x0000026844E5E438>],
             '$phi290.1': [<numba.core.ir.Assign object at 0x0000026844E56DD8>],
             '$phi290.2': [<numba.core.ir.Assign object at 0x0000026844E56E48>],
             '$phi360.1': [<numba.core.ir.Assign object at 0x0000026844E63710>],
             '$phi362.1': [<numba.core.ir.Assign object at 0x0000026844E67C50>],
             '$phi410.1': [<numba.core.ir.Assign object at 0x0000026844E6DBE0>],
             '$phi412.1': [<numba.core.ir.Assign object at 0x0000026844E70240>],
             '$phi458.1': [<numba.core.ir.Assign object at 0x0000026844E702B0>],
             '$phi458.2': [<numba.core.ir.Assign object at 0x0000026844E70320>],
             '$phi464.1': [<numba.core.ir.Assign object at 0x0000026844E67CC0>],
             '$phi464.2': [<numba.core.ir.Assign object at 0x0000026844E67D30>],
             '$phi476.1': [<numba.core.ir.Assign object at 0x0000026844E520B8>],
             '$phi476.2': [<numba.core.ir.Assign object at 0x0000026844E52128>],
             'eta': [<numba.core.ir.Assign object at 0x0000026844E44A58>,
                     <numba.core.ir.Assign object at 0x0000026844E56160>,
                     <numba.core.ir.Assign object at 0x0000026844E63D68>],
             'frac': [<numba.core.ir.Assign object at 0x0000026844E445C0>,
                      <numba.core.ir.Assign object at 0x0000026844E52908>,
                      <numba.core.ir.Assign object at 0x0000026844E635C0>],
             'i': [<numba.core.ir.Assign object at 0x0000026844E56F98>],
             'i_max': [<numba.core.ir.Assign object at 0x0000026844E569B0>],
             'index_frac': [<numba.core.ir.Assign object at 0x0000026844E44748>,
                            <numba.core.ir.Assign object at 0x0000026844E52BA8>,
                            <numba.core.ir.Assign object at 0x0000026844E637F0>],
             'index_step': [<numba.core.ir.Assign object at 0x0000026844E44128>],
             'interp_delta': [<numba.core.ir.Assign object at 0x0000026844E3B550>],
             'interp_win': [<numba.core.ir.Assign object at 0x0000026844E3B4A8>],
             'j': [<numba.core.ir.Assign object at 0x0000026844E5E588>,
                   <numba.core.ir.Assign object at 0x0000026844E70438>],
             'k': [<numba.core.ir.Assign object at 0x0000026844E67E80>],
             'k_max': [<numba.core.ir.Assign object at 0x0000026844E67780>],
             'n': [<numba.core.ir.Assign object at 0x0000026844E44438>,
                   <numba.core.ir.Assign object at 0x0000026844E524E0>],
             'n_channels': [<numba.core.ir.Assign object at 0x0000026844EAD860>],
             'n_orig': [<numba.core.ir.Assign object at 0x0000026844EAD780>],
             'n_out': [<numba.core.ir.Assign object at 0x0000026844EAD7F0>],
             'num_table': [<numba.core.ir.Assign object at 0x0000026844E3B5F8>],
             'nwin': [<numba.core.ir.Assign object at 0x0000026844EAD2E8>],
             'offset': [<numba.core.ir.Assign object at 0x0000026844E448D0>,
                        <numba.core.ir.Assign object at 0x0000026844E52E80>,
                        <numba.core.ir.Assign object at 0x0000026844E63AC8>],
             'sample_ratio': [<numba.core.ir.Assign object at 0x0000026844E3B400>],
             'scale': [<numba.core.ir.Assign object at 0x0000026844E3B940>],
             't': [<numba.core.ir.Assign object at 0x0000026844E52278>],
             'time_increment': [<numba.core.ir.Assign object at 0x0000026844E3BC50>],
             'time_register': [<numba.core.ir.Assign object at 0x0000026844E442B0>,
                               <numba.core.ir.Assign object at 0x0000026844E76630>],
             'weight': [<numba.core.ir.Assign object at 0x0000026844E44BE0>,
                        <numba.core.ir.Assign object at 0x0000026844E5ACC0>,
                        <numba.core.ir.Assign object at 0x0000026844E6DBA8>],
             'x': [<numba.core.ir.Assign object at 0x0000026844E3B2B0>],
             'y': [<numba.core.ir.Assign object at 0x0000026844E3B358>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:143] DEBUG SSA violators {'weight', 'eta', 'j', 'index_frac', 'time_register', 'n', 'frac', 'offset'}
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var weight
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: weight
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E1DF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844E769B0>],
             196: [<numba.core.ir.Assign object at 0x0000026844E76CC0>],
             362: [<numba.core.ir.Assign object at 0x0000026844E02DA0>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='weight' stmt=$246.17 = weight * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 244 from label 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 236 from label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 234 from label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 196 from label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='weight' stmt=$412.19 = weight * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 410 from label 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 402 from label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 400 from label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 362 from label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADC88>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var eta
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: eta
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02F28>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844E02EF0>],
             116: [<numba.core.ir.Assign object at 0x0000026844E76F28>],
             292: [<numba.core.ir.Assign object at 0x0000026844E76F60>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='eta' stmt=$196.17 = eta * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='eta' stmt=$362.17 = eta * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 360 from label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 352 from label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 350 from label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 292 from label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF60>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var j
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: j
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76D68>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {246: [<numba.core.ir.Assign object at 0x0000026844E76940>],
             412: [<numba.core.ir.Assign object at 0x0000026844ED85F8>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='j' stmt=$246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='j' stmt=$246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='j' stmt=$412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='j' stmt=$412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADAC8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var index_frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: index_frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E02DD8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844E02B38>],
             116: [<numba.core.ir.Assign object at 0x0000026844E76B00>],
             292: [<numba.core.ir.Assign object at 0x0000026844EADAC8>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='index_frac' stmt=offset = call $116.13(index_frac, func=$116.13, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='index_frac' stmt=eta.1 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='index_frac' stmt=offset = call $292.7(index_frac, func=$292.7, args=[Var(index_frac, interpn.py:17)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='index_frac' stmt=eta.2 = index_frac - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var time_register
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: time_register
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E025C0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844E02B00>],
             466: [<numba.core.ir.Assign object at 0x0000026844ED8828>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='time_register' stmt=n = call $116.2(time_register, func=$116.2, args=[Var(time_register, interpn.py:13)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 112 from label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:380] DEBUG insert phi node time_register.2 = phi(incoming_values=[], incoming_blocks=[]) at 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 100 from label 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 0 from label 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:388] DEBUG incoming_def time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:388] DEBUG incoming_def time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: n = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='time_register' stmt=$116.8 = time_register - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 112 from label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $116.8 = time_register.2 - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='time_register' stmt=$466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 464 from label 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 360 from label 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 352 from label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 350 from label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 292 from label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 290 from label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 112 from label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EAD668>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844E769E8>],
             116: [<numba.core.ir.Assign object at 0x0000026844E76AC8>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='n' stmt=$116.8 = time_register.2 - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $116.8 = time_register.2 - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='n' stmt=$116.22 = n + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $116.22 = n.1 + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='n' stmt=$246.13 = n - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 244 from label 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 236 from label 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 234 from label 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 196 from label 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $246.13 = n.1 - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='n' stmt=$292.16 = n_orig - n
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 290 from label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $292.16 = n_orig - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='n' stmt=$412.13 = n + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 410 from label 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 402 from label 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 400 from label 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 362 from label 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 360 from label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 352 from label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 350 from label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 292 from label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 290 from label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $412.13 = n.1 + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844ED8EB8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: frac.1 = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n.1 + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n.1 - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: frac.2 = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n.1 + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844EADFD0>],
             116: [<numba.core.ir.Assign object at 0x0000026844E76EB8>],
             292: [<numba.core.ir.Assign object at 0x0000026844ED84E0>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.1 = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='frac' stmt=index_frac.1 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: index_frac.1 = frac.1 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n.1 + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n.1 - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='frac' stmt=$292.3 = scale - frac
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 290 from label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $292.3 = scale - frac.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.2 = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='frac' stmt=index_frac.2 = frac * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: index_frac.2 = frac.2 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n.1 + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844E76FD0>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:50] DEBUG Fix SSA violator on var offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:256] DEBUG first assign: offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.1 = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac.1 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: offset.1 = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n.1 + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n.1 - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.2 = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac.2 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: offset.2 = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n.1 + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FreshVarHandler object at 0x0000026844ED87B8>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:55] DEBUG Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x0000026844ED8EF0>],
             116: [<numba.core.ir.Assign object at 0x0000026844ED8898>],
             292: [<numba.core.ir.Assign object at 0x0000026844E76E10>]})
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 0
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: x = arg(0, name=x)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y = arg(1, name=y)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: sample_ratio = arg(2, name=sample_ratio)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_win = arg(3, name=interp_win)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: interp_delta = arg(4, name=interp_delta)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: num_table = arg(5, name=num_table)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.1 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.2 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: scale = call $0.1($const0.2, sample_ratio, func=$0.1, args=[Var($const0.2, interpn.py:10), Var(sample_ratio, interpn.py:10)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.5 = const(float, 1.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_increment = $const0.5 / sample_ratio
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.8 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.11 = scale * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_step = call $0.8($0.11, func=$0.8, args=[Var($0.11, interpn.py:12)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight = const(float, 0.0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.21 = getattr(value=interp_win, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.22 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: nwin = static_getitem(value=$0.21, index=0, index_var=$const0.22, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.25 = getattr(value=x, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.26 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_orig = static_getitem(value=$0.25, index=0, index_var=$const0.26, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.29 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.30 = const(int, 0)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_out = static_getitem(value=$0.29, index=0, index_var=$const0.30, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $0.33 = getattr(value=y, attr=shape)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const0.34 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n_channels = static_getitem(value=$0.33, index=1, index_var=$const0.34, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 100
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 104
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.3 = call $104.1(n_out, func=$104.1, args=[Var(n_out, interpn.py:24)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $104.4 = getiter(value=$104.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi112.1 = $104.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.2 = phi(incoming_values=[Var(time_register, interpn.py:13), Var(time_register.1, interpn.py:67)], incoming_blocks=[104, 466])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.2 = iternext(value=$phi112.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.3 = pair_first(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $112.4 = pair_second(value=$112.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi116.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.1 = $112.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi476.2 = $phi112.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $112.4, 116, 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: t = $phi116.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.2 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: n.1 = call $116.2(time_register.2, func=$116.2, args=[Var(time_register.2, interpn.py:27)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.8 = time_register.2 - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.1 = scale * $116.8
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.1 = frac.1 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.13 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset.1 = call $116.13(index_frac.1, func=$116.13, args=[Var(index_frac.1, interpn.py:35)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=eta.1 = index_frac.1 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.1 = index_frac.1 - offset.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.19 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const116.21 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.22 = n.1 + $const116.21
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$116.25 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $116.25 = nwin - offset.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $116.27 = $116.25 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i_max = call $116.19($116.22, $116.27, func=$116.19, args=[Var($116.22, interpn.py:42), Var($116.27, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.3 = call $186.1(i_max, func=$186.1, args=[Var(i_max, interpn.py:42)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $186.4 = getiter(value=$186.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi194.1 = $186.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.2 = iternext(value=$phi194.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.3 = pair_first(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $194.4 = pair_second(value=$194.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi196.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.1 = $194.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi290.2 = $phi194.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $194.4, 196, 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: i = $phi196.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.6 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$196.7 = offset + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $196.7 = offset.1 + $196.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.8 = getitem(value=interp_win, index=$196.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.14 = i * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$196.15 = offset + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 194 from label 196
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 186 from label 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 184 from label 186
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 116 from label 184
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 116
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $196.15 = offset.1 + $196.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.16 = getitem(value=interp_delta, index=$196.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $196.17 = eta.1 * $196.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.1 = $196.8 + $196.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 234
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 236
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.3 = call $236.1(n_channels, func=$236.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $236.4 = getiter(value=$236.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi244.1 = $236.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.2 = iternext(value=$phi244.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.3 = pair_first(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $244.4 = pair_second(value=$244.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi246.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.1 = $244.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi286.2 = $phi244.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $244.4, 246, 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 246
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j = $phi246.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.8 = getitem(value=y, index=$246.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.13 = n.1 - i
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.15 = build_tuple(items=[Var($246.13, interpn.py:47), Var(j, interpn.py:46)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.16 = getitem(value=x, index=$246.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.17 = weight.1 * $246.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $246.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$246.8, rhs=$246.17, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$246.5] = $246.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 244
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 286
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 288
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 194
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 290
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.3 = scale - frac.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: frac.2 = $292.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: index_frac.2 = frac.2 * num_table
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.7 = global(int: <class 'int'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: offset.2 = call $292.7(index_frac.2, func=$292.7, args=[Var(index_frac.2, interpn.py:53)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=eta.2 = index_frac.2 - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: eta.2 = index_frac.2 - offset.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.13 = global(min: <built-in function min>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.16 = n_orig - n.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const292.17 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.18 = $292.16 - $const292.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$292.21 = nwin - offset
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $292.21 = nwin - offset.2
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $292.23 = $292.21 // index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k_max = call $292.13($292.18, $292.23, func=$292.13, args=[Var($292.18, interpn.py:60), Var($292.23, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.3 = call $352.1(k_max, func=$352.1, args=[Var(k_max, interpn.py:60)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $352.4 = getiter(value=$352.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi360.1 = $352.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.2 = iternext(value=$phi360.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.3 = pair_first(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $360.4 = pair_second(value=$360.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi362.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.1 = $360.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi464.2 = $phi360.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $360.4, 362, 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: k = $phi362.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.6 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$362.7 = offset + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 360 from label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 352 from label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 350 from label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 292 from label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $362.7 = offset.2 + $362.6
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.8 = getitem(value=interp_win, index=$362.7, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.14 = k * index_step
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:332] DEBUG find_def var='offset' stmt=$362.15 = offset + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 360 from label 362
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 352 from label 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 350 from label 352
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:363] DEBUG find_def_from_top label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:400] DEBUG idom 292 from label 350
Sat, 31 Jul 2021 23:08:32 ssa.py[line:406] DEBUG find_def_from_bottom label 292
Sat, 31 Jul 2021 23:08:32 ssa.py[line:186] DEBUG replaced with: $362.15 = offset.2 + $362.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.16 = getitem(value=interp_delta, index=$362.15, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $362.17 = eta.2 * $362.16
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: weight.2 = $362.8 + $362.17
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 400
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 402
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.1 = global(range: <class 'range'>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.3 = call $402.1(n_channels, func=$402.1, args=[Var(n_channels, interpn.py:25)], kws=(), vararg=None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $402.4 = getiter(value=$402.3)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi410.1 = $402.4
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.2 = iternext(value=$phi410.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.3 = pair_first(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $410.4 = pair_second(value=$410.2)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi412.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.1 = $410.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $phi458.2 = $phi410.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: branch $410.4, 412, 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 412
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: j.1 = $phi412.1
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.5 = build_tuple(items=[Var(t, interpn.py:27), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.8 = getitem(value=y, index=$412.5, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.13 = n.1 + k
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const412.14 = const(int, 1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.15 = $412.13 + $const412.14
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.17 = build_tuple(items=[Var($412.15, interpn.py:64), Var(j.1, interpn.py:63)])
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.18 = getitem(value=x, index=$412.17, fn=<built-in function getitem>)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.19 = weight.2 * $412.18
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $412.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$412.8, rhs=$412.19, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: y[$412.5] = $412.20
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 410
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 458
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 460
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 360
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 464
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 466
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $466.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=time_register.2, rhs=time_increment, static_lhs=Undefined, static_rhs=Undefined)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: time_register.1 = $466.3
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 112
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 476
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: jump 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:157] DEBUG ==== SSA block rewrite pass on 478
Sat, 31 Jul 2021 23:08:32 ssa.py[line:178] DEBUG Running <numba.core.ssa._FixSSAVars object at 0x0000026844EADF98>
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $const478.1 = const(NoneType, None)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: $478.2 = cast(value=$const478.1)
Sat, 31 Jul 2021 23:08:32 ssa.py[line:180] DEBUG on stmt: return $478.2
